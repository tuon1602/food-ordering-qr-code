// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // could be any DB here, mine default is sqlite
  url      = env("DATABASE_URL")
}

//example of model, you can change then run npx prisma db pull

//enum
enum Role {
  EMPLOYEE
  ADMIN
}

enum OrderStatus {
  NEW
  PENDING
  PREPARING
  READY
  COMPLETED
  CANCELLED
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  PAYING
}

model User {
  id        String   @id @default(cuid())
  username  String
  password  String
  role      Role     @default(EMPLOYEE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Restaurant {
  id          String     @id @default(cuid())
  name        String
  description String?
  address     String
  tables      Table[]
  menuItems   MenuItem[]
  orders      Order[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Table {
  id           String     @id @default(cuid())
  tableNumber  String     // e.g., "Table 1", "A1", etc.
  qrCode       String     @unique // Each table has its own unique QR code
  capacity     Int        // Number of seats
  status       TableStatus @default(AVAILABLE)
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  orders       Order[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model MenuItem {
  id           String     @id @default(cuid())
  name         String
  description  String?
  price        Float
  imageUrl     String?
  category     String?
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  orderItems   OrderItem[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Order {
  id           String      @id @default(cuid())
  restaurantId String
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  tableId      String
  table        Table       @relation(fields: [tableId], references: [id])
  status       OrderStatus @default(NEW)
  items        OrderItem[]
  totalAmount  Float
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id])
  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
  quantity   Int
  price      Float    // Price at the time of order
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}